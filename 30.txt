N := 30; 
load "functions.m";
F := Rationals();  
R<x,y>:=PolynomialRing(F,2);
pol := y^6
        + (x^6 - 5*x^5 + 6*x^4 + 3*x^3 - 6*x^2 + 7*x + 3)*y^5
        + (x^7 - 3*x^6 - 13*x^5 + 44*x^4 - 18*x^3 + x^2 + 18*x + 3)*y^4
        + (x^8 - 3*x^7 - 13*x^6 + 27*x^5 + 46*x^4 - 32*x^3 + 21*x^2 + 15*x + 1)*y^3
        + 2*x*(x^7 - 8*x^6 + 9*x^5 + 20*x^4 + 6*x^3 - 6*x^2 + 9*x + 2)*y^2
        - 4*x^2*(2*x^5 - 7*x^4 - 3*x^3 - 1)*y
        + 8*x^6;
A2<u,v> := AffineSpace(F,2);
X := Curve(A2,pol);
Genus(X);
//torsData := {@@};  
//  for p in [q : q in PrimesUpTo(40) | not q in PrimeDivisors(2*N) ] do
//  for p in [7,11] do     
//      invs := Invariants(ClassGroup(Curve(Reduction(X,p))));
//      torsData := torsData join {@invs@};
//      <p,invs>;
//  end for;
// "The rational torsion subgroup is a subgroup of", torsBound(torsData); ;
 
 
 Xp:=ProjectiveClosure(X);
//pts:=RationalPoints(Xp:Bound:=1);


pts:=[[1 , -2 , 1], [0 , -1 , 1], [0 , 1 , 0], [0 , 0 , 1], [1 , 0 , 0], [1 , -1 ,
1]];

basePt := [0 , 1 , 0];
p := 7;
  Cp<[T]> := Curve(Reduction(Xp,p));
    pic,mPic := ClassGroup(Cp);    
  basePt := &+Places(Cp![0 , 1 , 0]);
  divs := {@
         &+Places(Cp!pt) - Degree(&+Places(Cp!pt))*basePt
         : pt in pts @} ;  
  
  global, mGlobal := 
     sub<pic | [(Inverse(mPic))(divs[i]) : i in [1..#divs]]>;  
  Invariants(global); // [ 4,8160 ], so we've generated the whole torsion with the rational cusps. 
 
 "There are", [#Places(Cp,i) : i in [1..4]], "places of degree 1, 2, 3, and 4 over F_7"; // [ 16, 20, 128, 606 ]    
 
 
F := Rationals();  
P<[X]> := ProjectiveSpace(F,8);
eqns:=[X[1]*X[3] - X[1]*X[4] + X[1]*X[5] + X[1]*X[9] + X[1]*X[6] - X[2]*X[7] + X[6]*X[7],
X[1]*X[1] + X[1]*X[2] + X[1]*X[4] - X[1]*X[8] + X[2]*X[4] - X[5]*X[9] - X[9]*X[8] - X[7]*X[8] + X[8]*X[8],
X[1]*X[9] + X[2]*X[3] - X[2]*X[5] + X[2]*X[9] + X[3]*X[3] - X[3]*X[4] - X[3]*X[5] - X[5]*X[7],
X[1]*X[3] - X[1]*X[5] + X[2]*X[3] - X[2]*X[5] - X[5]*X[5] - X[5]*X[9] - X[5]*X[6] - X[5]*X[7] - X[6]*X[8] - X[7]*X[8],
X[1]*X[2] - X[1]*X[5] - X[1]*X[6] + X[1]*X[8] + X[2]*X[2] - X[2]*X[6] + X[2]*X[8] - X[5]*X[5] - X[5]*X[6] + X[9]*X[8] - X[6]*X[8] + X[7]*X[8] - X[8]*X[8],
X[1]*X[5] + X[1]*X[9] + X[2]*X[5] + X[2]*X[9] + X[2]*X[6] + X[2]*X[7] + X[5]*X[9] - X[5]*X[6] - X[5]*X[7] - X[6]*X[6] - X[6]*X[7],
X[1]*X[5] + X[1]*X[6] + X[1]*X[7] + X[1]*X[8] + X[2]*X[6] + X[2]*X[7] + X[5]*X[9] + X[5]*X[7] - X[5]*X[8] - X[6]*X[6] + X[7]*X[7] + X[7]*X[8] - X[8]*X[8],
X[1]*X[1] + X[1]*X[2] - X[1]*X[5] - X[1]*X[9] - X[1]*X[6] - X[1]*X[8] - X[2]*X[4] - X[2]*X[9] - X[2]*X[6] + X[3]*X[4] + X[5]*X[8] - X[9]*X[7] + X[9]*X[8] + X[6]*X[6] + X[7]*X[8],
X[1]*X[2] + X[1]*X[7] + X[2]*X[2] + X[2]*X[5] + X[2]*X[9] + X[2]*X[7] - X[2]*X[8] - X[3]*X[3] + X[3]*X[5] + X[5]*X[7] + X[9]*X[7] - X[7]*X[8],
X[1]*X[6] + X[1]*X[7] + X[5]*X[6] + X[5]*X[7] + X[9]*X[6] + X[9]*X[7] + X[9]*X[8] + X[6]*X[6] + X[6]*X[7] - X[6]*X[8] - X[7]*X[8],
X[1]*X[2] + X[1]*X[3] - X[1]*X[5] - X[1]*X[6] + X[1]*X[8] + X[2]*X[2] + X[2]*X[3] - X[2]*X[5] - X[2]*X[6] + X[4]*X[8],
X[1]*X[1] + X[1]*X[2] + X[1]*X[4] + X[1]*X[5] + X[2]*X[4] - X[4]*X[6] - X[4]*X[7] + X[5]*X[7] + X[6]*X[7] + X[7]*X[7],
X[1]*X[2] + X[1]*X[3] - X[1]*X[4] + X[1]*X[9] + X[2]*X[2] - X[4]*X[5] - X[5]*X[8] - X[9]*X[8] - X[6]*X[6],
X[2]*X[3] + X[2]*X[4] - X[2]*X[5] + X[2]*X[9] - X[4]*X[4],
X[1]*X[1] + X[1]*X[2] + X[1]*X[3] + X[1]*X[4] + X[2]*X[4] - X[3]*X[3] + X[3]*X[4] + X[3]*X[5] + X[4]*X[9] - X[9]*X[7],
X[1]*X[3] + X[1]*X[8] + X[2]*X[3] + X[2]*X[8] + X[3]*X[5] + X[3]*X[8],
X[1]*X[1] + X[1]*X[2] - X[1]*X[3] + X[1]*X[4] + X[2]*X[4] + X[2]*X[9] + X[2]*X[8] - X[3]*X[7] + X[3]*X[8] - X[9]*X[7] + X[7]*X[8],
X[1]*X[3] - X[2]*X[8] - X[3]*X[3] + X[3]*X[4] - X[3]*X[6] - X[3]*X[7] - X[7]*X[8]];
X := Curve(P,eqns);
pts:=PointSearch(X,1);
	
// does not work	
   

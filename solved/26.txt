 N := 26; 

  
  //////////////////////////////////////////////////////////////////////////////////////////
  // Input the homebrewed functions 
  //////////////////////////////////////////////////////////////////////////////////////////
  
  load "functions.m";
  F := Rationals();
  P<[t]> := ProjectiveSpace(F,9);       
  A2<x,y> := AffineSpace(F,2);

  X:=Curve(A2,y^6 + (3*x^2 + 4*x - 2)*y^5 + (3*x^4 + 10*x^3 - 9*x + 1)*y^4 + (x^6 + 7*x^5 + 8*x^4 - 14*x^3 - 11*x^2 + 6*x)*y^3 + (x^7 + 4*x^6 - x^5 - 13*x^4 + 2*x^3 + 10*x^2 - x)*y^2 - (x^6 - 7*x^4 - 4*x^3 + 2*x^2)*y - x^4 - x^3);
  Xp := ProjectiveClosure(X);
  
  basePt := [-1 , 0 , 1];
  
  // mostly singular
  pts := 
  [
    [  0, 1, 0 ],
    [  0, 0, 1 ],
    [ -1, 0, 1 ],
    [  0, 1, 1 ],
    [  1, 0, 0 ],
    [ -1, 1, 1 ],
    [ -1, 1, 0 ]
  ];    
p := 3;
  Cp<[T]> := Curve(Reduction(Xp,p));
  pic,mPic := ClassGroup(Cp);    
  basePt := &+Places(Cp![-1,0,1]);
  divs := {@&+Places(Cp!pt) - Degree(&+Places(Cp!pt))*basePt : pt in pts @} ;
   "There are", [#Places(Cp,i) : i in [1..4]], "places of degree 1, 2, 3 amd 4 over F_3"; //[12,0,16,12];    
    // the 12 degree 1 points lift to Q so we compute with the 12 quartic points
global, mGlobal := 
     sub<pic | [(Inverse(mPic))(divs[i]) : i in [1..#divs]]>;  
  Invariants(global); // [ 133, 1995 ]    
	validImages := {@@};
	

 
for pl in Places(Cp,4) do
      D := Divisor(pl) - Degree(pl)*basePt;
      if Inverse(mPic)(D) in global then
        validImages := 
        validImages join {@Inverse(mPic)(D)@};
      end if;
  end for;
  
  
 "The rational places all lift to Q, and",  #validImages, "of the other places are in the image of Abel--Jacobi"; // 0

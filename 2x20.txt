F := Rationals();  
P<[X]> := ProjectiveSpace(F,8);
eqns:=[X[1]*X[3] + X[1]*X[6] - X[5]*X[7],
X[9]*X[6] + X[4]*X[6] + X[5]*X[7],
X[1]*X[1] + X[8]*X[5] - X[5]*X[7],
X[1]*X[2] - X[1]*X[3] - X[1]*X[5] - X[4]*X[5],
X[2]*X[6] + X[8]*X[7] - X[9]*X[6] - X[9]*X[7],
X[8]*X[4] - X[8]*X[6] + X[6]*X[7],
X[1]*X[1] + X[2]*X[8] + X[2]*X[6] + X[8]*X[4] + X[4]*X[6],
X[2]*X[6] - X[9]*X[4] - X[5]*X[6] - X[5]*X[7] - X[6]*X[7],
X[1]*X[4] + X[1]*X[7] - X[2]*X[4] + X[9]*X[4] + X[4]*X[7],
X[1]*X[2] - X[1]*X[9] + X[1]*X[4] - X[1]*X[6] - X[2]*X[2] + X[2]*X[3] + X[2]*X[9] - X[4]*X[6],
X[1]*X[9] - X[1]*X[5] + X[1]*X[6] + X[2]*X[5] - X[3]*X[9] - X[9]*X[5] + X[4]*X[6],
X[1]*X[8] - X[1]*X[9] + X[2]*X[3] + X[2]*X[9] + X[2]*X[6] - X[8]*X[5] + X[9]*X[4] - X[4]*X[5],
X[1]*X[1] + X[1]*X[7] + X[3]*X[9] + X[9]*X[9] + X[9]*X[4] + X[9]*X[6] - X[4]*X[5],
X[1]*X[1] - X[1]*X[2] + X[1]*X[9] + X[1]*X[7] + X[8]*X[9] + X[8]*X[4],
X[1]*X[3] - X[1]*X[7] + X[2]*X[6] + X[3]*X[7] + X[4]*X[6],
X[1]*X[4] - X[1]*X[6] - X[3]*X[4] - X[4]*X[6],
X[1]*X[1] - X[1]*X[3] + X[2]*X[8] - X[3]*X[8],
X[1]*X[4] + X[1]*X[7] - X[2]*X[6] - X[2]*X[7] - X[4]*X[6],
X[1]*X[3] - X[1]*X[8] + X[1]*X[9] + X[2]*X[8] - X[8]*X[8] + X[8]*X[9] - X[8]*X[5] + X[9]*X[4],
X[1]*X[6] - X[3]*X[3] - X[3]*X[9] - X[3]*X[6] - X[9]*X[4],
X[1]*X[6] - X[2]*X[3] - X[2]*X[6] - X[3]*X[9] + X[3]*X[5] - X[9]*X[4] + X[4]*X[5]];
X := Curve(P,eqns);
pts:=PointSearch(X,1);

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
load "quartic_functions.m";

G:=GL2Lift(GL2SplitCartan(2),20)  meet GL2Borel1(20);
localtestgen(G,3);


F := Rationals(); 
A<u,v> := AffineSpace(F,2);
eqn:=v^8 + 4*u^2*v^7 + (6*u^4 - 2*u^2)*v^6 + (4*u^6 - 2*u^4 - 6*u^2)*v^5 + (u^8 + u^6 - 11*u^4 - u^2)*v^4 + (u^8 - 3*u^6 - 9*u^4 + 7*u^2)*v^3 + (u^8 - 3*u^6 + u^4 + 5*u^2)*v^2 + (u^8 + u^6 + u^4 + u^2)*v + u^8;
X := Curve(A,eqn);
Xp:=ProjectiveClosure(X);
pts:=PointSearch(Xp,1);
torsData := {@@};
  for p in [3,11 ] do     
      invs := Invariants(ClassGroup(Curve(Reduction(X,p))));
      torsData := torsData join {@invs@};
      <p,invs>;
  end for;



basePt := [0 , 0 , 1];
pts:= [ [1 , 1 , 1], [0 , 1 , 0], [0 , 0 , 1], [1 , 0 , 0], [-1 , 1 , 1], [1 , -1 ,
1], [-1 , -1 , 1] ];
  p := 3;
  Cp<[T]> := Curve(Reduction(Xp,p));
    pic,mPic := ClassGroup(Cp);    
  basePt := &+Places(Cp!basePt);
  divs := {@
         &+Places(Cp!pt) - Degree(&+Places(Cp!pt))*basePt
         : pt in pts @} ;  
  
  global, mGlobal := 
     sub<pic | [(Inverse(mPic))(divs[i]) : i in [1..#divs]]>;  
  Invariants(global); //[ 2, 30, 120, 0 ]




